<?php

namespace App\Filament\Resources\ContentResource\Pages;

use App\Filament\Resources\ContentResource;
use App\Models\Folder;
use Filament\Pages\Actions\Action;
use Filament\Resources\Pages\CreateRecord;
use GuzzleHttp\RequestOptions;
use http\Client;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Spatie\PdfToText\Pdf;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;

class CreateContent extends CreateRecord
{
    protected static string $resource = ContentResource::class;
    protected static ?string $breadcrumb = 'Upload';
    protected static ?string $title = 'Upload content';
    protected static bool $canCreateAnother = false;


    public function mount(): void
    {
        Cache::set('folder_id',\request()->folder_id);
        Cache::set('type',\request()->type);
        parent::mount(); // TODO: Change the autogenerated stub
    }

    protected function getFormActions(): array
    {
        return array_merge(parent::getFormActions(), [
            Action::make('create')->action('create')->label('Click here to train'),
        ]);
    }

    protected function beforeCreate(): void
    {

//        dd($this);

//        $this->data['text_data'] = 2;
//        $this->data['file_title'] = 2;
//
//
//
//        $file_titel =  array_values($this->data['file_path'])[0];
//
//        $this->data['file_title'] = $file_titel;






    }

    public function afterCreate(){

        try {

            $folder = Folder::find($this->data['folder_id']);
           $this->record->text_data = "default";

            $this->record->is_learned = '0';
            $this->record->save();

            if ($this->record->type == "file"){

                $this->record->media()->where('collection_name','default')->delete();
                $media =  $this->record->media()->where('collection_name','images')->orderByDesc('id')->first();
                $this->record->file_title  = $media->file_name;
                $file_path = Storage::path('public/'.$media->id.'/'.$media->file_name);
                $text = base64_encode(file_get_contents($file_path));
                $_data= [
                    'content' => $text,
                    'identify' =>$this->record->id,
                    'callback' => route('ocr-callback'),
                ];
                $response = Http::post(env('OCR_API'), $_data);
            }else{
                $text =   $this->record->row_text;


                $client = new \GuzzleHttp\Client();
                $response = $client->post(
                    env('BOT_URL')."/api/training",
                    [
                        RequestOptions::JSON =>
                            [
                                'name' => $this->clean($this->record->file_title),
                                'pincone_name' => $this->record->folder->embedded_id,
                                'content' => $text,
                            ]
                    ],
                    ['Content-Type' => 'application/json']
                );

                $responseJSON = json_decode($response->getBody(), true);



                if ($responseJSON['status'] == false){
                    $this->record->is_learned = '1';
                }else{
                    $this->record->is_learned = '0';
                }

            }
            $this->record->save();



          //  dd($response->body());


           // dd(env('OCR_API'),$response->body());
        }catch (\Exception $exception){
           dd($exception);
        }



//        $this->record->save();
    }

    function clean($string) {
        $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.

        return preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
    }

    protected function getRedirectUrl(): string
    {
        return $this->previousUrl ?? $this->getResource()::getUrl('index');
    }
}
