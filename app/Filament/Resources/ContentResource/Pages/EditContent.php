<?php

namespace App\Filament\Resources\ContentResource\Pages;

use App\Filament\Resources\ContentResource;
use App\Models\Content;
use App\Models\Folder;
use Filament\Pages\Actions;
use Filament\Pages\Actions\Action;
use Filament\Resources\Pages\EditRecord;
use GuzzleHttp\RequestOptions;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Spatie\PdfToText\Pdf;

class EditContent extends EditRecord
{
    protected static string $resource = ContentResource::class;


    public $previous_file_path = null;
    public $previous_file_title = null;

    public function getCachedActions(): array
    {
       return [];
    }


    public function mount($record): void
    {
        Cache::set('folder_id',\request()->folder_id);
        Cache::set('type',\request()->type);

        $media = Content::find($record)->media->first();
        if (!empty($media)){
            $this->previous_file_path = Storage::path("public/".$media->id."/".$media->file_name);
        }else{
            $this->previous_file_title = Content::find($record)->file_title;
        }


        parent::mount($record); // TODO: Change the autogenerated stub
    }




    protected function beforeSave(): void
    {

        if (!empty($this->previous_file_path))
        deleteVector($this->record->folder->embedded_id,[$this->previous_file_path]);

        if (!empty($this->previous_file_title)){
            deleteVector($this->record->folder->embedded_id,[$this->previous_file_title]);
        }


    }
    protected function afterSave(): void
    {

        $folder = Folder::find($this->data['folder_id']);

        $media =  $this->record->media()->where('collection_name','images')->orderByDesc('id')->first();
        if (!empty($media)){
            $this->record->file_title = $media->file_name;
            $this->record->is_learned = '0';
            $this->record->save();
            $file_path = Storage::path('public/'.$media->id.'/'.$media->file_name);

            $client = new \GuzzleHttp\Client();
            $response = $client->post(
                env('OCR_API'),
                [
                    RequestOptions::JSON =>
                        [
                            'content' => base64_encode(file_get_contents($file_path)),
                            'identify' =>$this->record->id,
                            'callback' => route('ocr-callback'),
                        ]
                ],
                ['Content-Type' => 'application/json']
            );
        }else{
            $text =   $this->record->row_text;


            $client = new \GuzzleHttp\Client();
            $response = $client->post(
                env('BOT_URL')."/api/training",
                [
                    RequestOptions::JSON =>
                        [
                            'name' => $this->clean($this->record->file_title),
                            'pincone_name' => $this->record->folder->embedded_id,
                            'content' => $text,
                        ]
                ],
                ['Content-Type' => 'application/json']
            );

            $responseJSON = json_decode($response->getBody(), true);



            if ($responseJSON['status'] == false){
                $this->record->is_learned = '1';
            }else{
                $this->record->is_learned = '0';
            }
            $this->record->save();
        }



    }

    function clean($string) {
        $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.

        return preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
    }
    protected function getActions(): array
    {
        return [
            Actions\ViewAction::make(),
            Actions\DeleteAction::make(),
        ];
    }
}
