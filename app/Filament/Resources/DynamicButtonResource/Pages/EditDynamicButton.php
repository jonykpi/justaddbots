<?php

namespace App\Filament\Resources\DynamicButtonResource\Pages;

use App\Filament\Resources\DynamicButtonResource;
use App\Jobs\TranslateKeywords;
use App\Models\Folder;
use Filament\Pages\Actions;
use Filament\Pages\Actions\Action;
use Filament\Pages\Actions\DeleteAction;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;
use OpenAI\Laravel\Facades\OpenAI;

class EditDynamicButton extends EditRecord
{
    protected static string $resource = DynamicButtonResource::class;


    public function delete():void
    {
        $this->authorize();

        $this->deleteRecord($this->findRecordOrFail());

        // call your custom delete method here
        $this->resource()->getController()->delete($this->record->id);

        $this->redirect($this->getRedirectUrl());

    }


    public function mount($record): void
    {
        if (!empty(request()->folder_id)){
            Cache::set('folder_id',request()->folder_id);
        }


        parent::mount($record); // TODO: Change the autogenerated stub
    }


    /**
     * @param mixed $redirectTo
     */
    protected function getRedirectUrl(): string
    {
        return $this->previousUrl ?? $this->getResource()::getUrl('index');
    }

    protected function getFormActions(): array
    {

        $ss = [];
        parent::getFormActions()[1]->url(route('filament.resources.dynamic-buttons.index',['folder_id'=>Cache::get('folder_id')]));
        array_push($ss,parent::getFormActions()[0]);
        $folder = Folder::find($this->data['folder_id']);

        if(!empty($folder->lang_all_column) && $folder->is_multi_lang == 1){

            array_push($ss,Actions\Action::make('Save and force translate')
//                ->url(route('filament.resources.dynamic-buttons.index',['folder_id'=>Cache::get('folder_id')]))
                ->requiresConfirmation()
                ->modalHeading('Force translate')
                ->modalSubheading('It will take or less 5 to 10 min to process')
                ->modalButton('Confirm')
                ->action('save'));
        }


//        array_push($ss,parent::getFormActions()[1]);
        array_push($ss,parent::getFormActions()[1]);
        // dd(parent::getFormActions(),Action::make('aawqw'));
        return $ss; // TODO: Change the autogenerated stub
    }

    protected function afterSave()
    {


        $langs = array_values(languages());
        if (!empty(!empty($this->getMountedActionForm())) && $this->getMountedActionForm()->getContext() == "Save and force translate"){
            dispatch(new TranslateKeywords($this->data['master_tags'],$langs,$this->record,true));
        }
    }

//    protected function mutateFormDataBeforeSave(array $data): array
//    {
//
//        $metaDetails = Http::get(env('NO_CODE_API')."?url=".$data['button_url']);
//       if ($metaDetails->status()){
//           $metaDetails = $metaDetails->json();
//          if (isset($metaDetails['error']) != 1){
//              $data['button_title'] = $metaDetails['title'];
//              //dd($metaDetails,$data);
//
//              $data['tags'] = ["test"];
//
//              $OPENAI_API_KEY = env('OPENAI_API_KEY');
//              $messages = [
//                  ['role' => 'system', 'content' => 'Reply only with one emoticon.'],
//                  ['role' => 'user', 'content' => "WEBPAGE TITLE: ".$metaDetails['title']."
//WEBPAGE SUMMARY: ".$metaDetails['description']."
//
//
//
//Extract the 5 main keywords in JSON format based on the webpage title and webpage summary."],
//              ];
//              $result = OpenAI::chat()->create([
//                  'model' => 'gpt-3.5-turbo',
//                  'messages' => $messages,
//              ]);
//              if (!empty(json_decode(Arr::get($result, 'choices.0.message')['content'])->keywords)){
//                  $data['tags'] = json_decode(Arr::get($result, 'choices.0.message')['content'])->keywords;
//              }
//          }
//       }
//
//
//
//        return parent::mutateFormDataBeforeSave($data); // TODO: Change the autogenerated stub
//    }

    protected function getActions(): array
    {
        return [
            Actions\DeleteAction::make()->successRedirectUrl(route('filament.resources.dynamic-buttons.index',['folder_id'=>Cache::get('folder_id')])),
        ];
    }
}
