<?php

namespace App\Filament\Resources\DynamicButtonResource\Pages;

use App\Filament\Resources\DynamicButtonResource;
use App\Jobs\TranslateKeywords;
use App\Models\Folder;
use Filament\Forms\Components\Actions\Action;
use Filament\Pages\Actions;
use Filament\Resources\Pages\CreateRecord;
use Filament\Support\Actions\Modal\Actions\Concerns\CanCancelAction;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;
use OpenAI\Client;
use OpenAI\Laravel\Facades\OpenAI;

class CreateDynamicButton extends CreateRecord
{
    protected static string $resource = DynamicButtonResource::class;

   public function mount(): void
   {
       Cache::set('folder_id',request()->folder_id);
       parent::mount(); // TODO: Change the autogenerated stub
   }

  protected function mutateFormDataBeforeCreate(array $data): array
  {

      $data['button_title'] = "N/A";
//      $data['tags'] = "N/A";
      return parent::mutateFormDataBeforeCreate($data); // TODO: Change the autogenerated stub
  }

    protected function afterCreate(): void
  {

      $metaDetails = Http::get(env('NO_CODE_API')."?url=".$this->record->button_url);


      if ($metaDetails->status()){
          $metaDetails = $metaDetails->json();
          if (isset($metaDetails['error']) != 1){
              $this->record->button_title = $metaDetails['title'];
              $this->record->button_description = $metaDetails['description'];
              $messages = [
                  ['role' => 'system', 'content' => 'Reply only with one emoticon.'],
                  ['role' => 'user', 'content' => "WEBPAGE TITLE: ".$metaDetails['title']."
WEBPAGE SUMMARY: ".$metaDetails['description']."
 Extract the 5 main keywords in JSON format based on the webpage title and webpage summary."
                  ],
              ];
              $result = OpenAI::chat()->create([
                  'model' => 'gpt-3.5-turbo',
                  'messages' => $messages,
              ]);



              $keywords = [];
              if (!empty(json_decode(Arr::get($result, 'choices.0.message')['content'])->keywords)){
                  $keywords = json_decode(Arr::get($result, 'choices.0.message')['content'])->keywords;
              }
              elseif (!empty(json_decode(Arr::get($result, 'choices.0.message')['content'])->Keywords)){
                  $keywords = json_decode(Arr::get($result, 'choices.0.message')['content'])->Keywords;
              }elseif(is_array(json_decode(Arr::get($result, 'choices.0.message')['content']))){

                  $keywords = json_decode(Arr::get($result, 'choices.0.message')['content']);
              }


              $this->record->master_tags = $keywords;

                if (isset($metaDetails['image'])){
                    $image_meta = file_get_contents($metaDetails['image']);
                    $base64 = base64_encode($image_meta);

                    $image_name = basename($metaDetails['image']);

                    $media =   $this->record->addMediaFromBase64($base64)
                        ->usingName($image_name)
                        ->usingFileName($image_name)
                        ->toMediaCollection('images');
                    $this->record->button_icon = $media->id."/".$image_name;
                }
               // dd($media);
              $this->record->save();

                ////// translate tag
              $langs = array_values(languages());

              if (!empty(!empty($this->getMountedActionForm())) && $this->getMountedActionForm()->getContext() == "Save and force translate"){
                  dispatch(new TranslateKeywords($keywords,$langs,$this->record,$is_update = false));
              }

          }
      }
  }







    public function getRedirectUrl(): string
   {
       return route('filament.resources.dynamic-buttons.index',['folder_id'=>Cache::get('folder_id')]); // TODO: Change the autogenerated stub
   }
}


