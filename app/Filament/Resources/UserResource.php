<?php

namespace App\Filament\Resources;

use App\Filament\Resources\UserResource\Pages;
use App\Filament\Resources\UserResource\RelationManagers;
use App\Models\Content;
use App\Models\Folder;
use App\Models\Plan;
use App\Models\User;
use Filament\Forms;
use Filament\Pages\Actions\DeleteAction;
use Filament\Resources\Form;
use Filament\Resources\Resource;
use Filament\Resources\Table;
use Filament\Tables;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Lab404\Impersonate\Impersonate;

class UserResource extends Resource
{
    protected static ?string $model = User::class;


    public static function canViewAny(): bool
    {
        return str_ends_with(Auth::user()->email, '@docs2ai.com');
    }

    public static function canCreate(): bool
    {

        return false; // TODO: Change the autogenerated stub
    }

    protected static ?string $navigationIcon = 'heroicon-o-collection';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Select::make('plan_id')->options(Plan::all()->pluck('title','id')->toArray())
            ]);
    }
    public static function getEloquentQuery(): Builder
    {
        return User::query()->with('mediaSize','lastMonthDate')->where("id","!=",Auth::id())->orderBy('id','desc'); // TODO: Change the autogenerated stub
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
             //   Tables\Columns\TextColumn::make('name')->searchable(),
                Tables\Columns\TextColumn::make('email')->searchable(),
              //  Tables\Columns\TextColumn::make('role')->searchable(),
                Tables\Columns\TextColumn::make('plan.title')->searchable(),
                Tables\Columns\TextColumn::make('bot')->default(
                    fn($record) =>
                        $record->bots->count()."|".
                    (!empty($record->plan) ? ($record->plan->max_number_of_bot > 0 ? $record->plan->max_number_of_bot : "∞") : "0")

                )->label('Bots'),
                Tables\Columns\TextColumn::make('response')->default(
                    function($record) {
                       $last_responses = $record->lastMonthDate;
                       if (!empty($last_responses)){
                           $last_responses = $last_responses->number_of_response;
                       }else{
                           $last_responses = 0;
                       }
                       return $last_responses."|". (!empty($record->plan) ? ($record->plan->max_number_of_response > 0 ? $record->plan->max_number_of_response : "∞") : "0");

                    }


                )->label('Responses'),
                Tables\Columns\TextColumn::make('click')
                    ->default(
                        function($record) {
                            $last_responses = $record->lastMonthDate;
                            if (!empty($last_responses)){
                                $last_responses = $last_responses->number_of_clicks;
                            }else{
                                $last_responses = 0;
                            }
                            return $last_responses."|". (!empty($record->plan) ? ($record->plan->max_number_of_click > 0 ? $record->plan->max_number_of_click : "∞") : "0");

                        }
                    )
                    ->label('Clicks'),
                Tables\Columns\TextColumn::make('mb')->default(
                    function($record){
                        return number_format($record->mediaSize->sum('size')*0.000001,0)."|".(!empty($record->plan) ? ($record->plan->max_number_of_mb > 0 ? $record->plan->max_number_of_mb : "∞") : "0");
                    })->label('MB'),
                Tables\Columns\TextColumn::make('created_at')->dateTime('d/m/y')->label('Created')->searchable(),
                Tables\Columns\TextColumn::make('last_login')->dateTime('d/m/y')->searchable(),
//                Tables\Columns\IconColumn::make('email_verified_at')
//                    ->options([
//                        'heroicon-o-check-circle' => fn ($state): bool => !empty($state),
//                        'heroicon-o-x-circle' => fn ($state): bool => empty($state),
//                    ])
//                    ->colors([
//                        'success' => fn ($state): bool => !empty($state),
//                        'danger' => fn ($state): bool => empty($state),
//                    ])
//                    ->label('Status')
//                ,
             //   Tables\Columns\TextColumn::make('company.name')->searchable(),
            ])
            ->filters([
                //
            ])
            ->actions([
                \STS\FilamentImpersonate\Tables\Actions\Impersonate::make()->redirectTo(config('filament')['path']), // <---
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make()->before(function ($record){
                   foreach ($record->bots as $bot){
                     $delete_result =   deleteVector($bot->embedded_id);
                       Content::where('folder_id',$bot->folder_id)->delete();
                       $bot->delete();
                   }

                }),


            ])
            ->bulkActions([
                Tables\Actions\DeleteBulkAction::make(),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUsers::route('/'),
            'create' => Pages\CreateUser::route('/create'),
            'edit' => Pages\EditUser::route('/{record}/edit'),
        ];
    }
}
