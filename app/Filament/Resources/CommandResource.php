<?php

namespace App\Filament\Resources;

use App\Filament\Resources\CommandResource\Pages;
use App\Filament\Resources\CommandResource\RelationManagers;
use App\Models\Command;
use Filament\Forms;
use Filament\Forms\Components\TextInput;
use Filament\Resources\Form;
use Filament\Resources\Resource;
use Filament\Resources\Table;
use Filament\Tables;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rules\Unique;

class CommandResource extends Resource
{
    protected static ?string $model = Command::class;

    protected static ?string $navigationIcon = 'heroicon-o-collection';

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()->where('folder_id',Cache::get('folder_id')); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                TextInput::make('folder_id')->hidden()
                    ->default(Cache::get('folder_id')),
                TextInput::make('cmd')
                    ->unique(callback: function (Unique $rule,$record) {
                        return $rule->ignore($record ? $record->id : false)->where('folder_id',Cache::get('folder_id'));
                    })
                    ->label('Command')
                    ->required()
                    ->columnSpanFull()
                    ->maxLength(30),
                 TextInput::make('desc')->label('Description')->required()->maxLength(100)
                     ->columnSpanFull(),
                Forms\Components\Toggle::make('status')


            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('cmd')->label('Command')->searchable(),
                Tables\Columns\TextColumn::make('desc')->label('Description')->searchable(),
                Tables\Columns\ToggleColumn::make('status'),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\DeleteBulkAction::make(),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCommands::route('/'),
            'create' => Pages\CreateCommand::route('/create'),
            'edit' => Pages\EditCommand::route('/{record}/edit'),
        ];
    }
}
